{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","blackMode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","onClick","setBlackMode","setStyle","modeBlack","data-bs-placement","btnText","TextForm","_useState","useState","_useState2","Object","slicedToArray","Text","setText","style","fontSize","heading","onChange","event","target","value","rows","backgroundColor","color","role","disabled","length","upperCaseText","toUpperCase","showAlert","LowerCaseText","toLowerCase","newText","split","i","charAt","slice","join","navigator","clipboard","writeText","filter","element","prototype","PropTypes","string","isRequired","aboutText","defaultProps","Alert","height","alert","str","lower","capitalize","msg","App","_useState3","_useState4","setBtnText","_useState5","_useState6","setAlert","document","body","Components_Alert","message","setTimeout","setStlye","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.4ceb560c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.blackMode === false ? 'dark' : 'light'}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            </ul>\r\n            <button type=\"button\" onClick={() => {\r\n              props.setBlackMode(true)\r\n              props.setStyle.modeBlack()\r\n            }} className={`mx-2 py-2 px-3 btn btn-${props.blackMode === false ? 'light' : 'dark'}`} data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\" title={`${props.btnText}`}></button>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.prototype = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"TextUtils\",\r\n  aboutText: \"About\",\r\n};\r\n","import { useState } from \"react\";\r\nimport React from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const [Text, setText] = useState(\"\");\r\n  const handleUppercase = () => {\r\n    let upperCaseText = Text.toUpperCase();\r\n    setText(upperCaseText);\r\n    props.showAlert(\"Your text has been converted in upper Case\", \"success\")\r\n  };\r\n  const handleLowercase = () => {\r\n    let LowerCaseText = Text.toLowerCase();\r\n    setText(LowerCaseText);\r\n    props.showAlert(\"Your text has been converted in lower Case\", \"success\")\r\n  };\r\n  const handleTitlecase = () => {\r\n    let newText = Text.toLowerCase().split(\" \");\r\n    for (var i = 0; i < newText.length; i++) {\r\n      newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].slice(1);\r\n    }\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Your text has been converted in title Case\", \"success\")\r\n  };\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Your text has been cleared\", \"success\")\r\n  };\r\n  const handeleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(Text);\r\n    props.showAlert(\"Your text has been copied to clipboard\", \"success\")\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    let newText = Text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces has been removed from your text\", \"success\")\r\n  };\r\n  return (\r\n    <>\r\n      <h1 style={{ fontSize: '36px' }}>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          className=\"form-control\"\r\n          onChange={handeleOnChange}\r\n          value={Text}\r\n          id=\"Textbox\"\r\n          rows=\"8\"\r\n          style={{\r\n            backgroundColor: props.blackMode === false ? 'black' : 'white',\r\n            color: props.blackMode === false ? 'white' : 'black'\r\n          }}\r\n        ></textarea>\r\n      </div>\r\n      <div\r\n        className=\"btn-group my-1 container \"\r\n        role=\"group\"\r\n        aria-label=\"Basic outlined example\"\r\n      >\r\n        <button\r\n          disabled={Text.length === 0}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={handleUppercase}\r\n        >\r\n          Concert to Uppercase\r\n        </button>\r\n        <button\r\n          disabled={Text.length === 0}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={handleLowercase}\r\n        >\r\n          Concert to Lowerrcase\r\n        </button>\r\n        <button\r\n          disabled={Text.length === 0}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={handleTitlecase}\r\n        >\r\n          Concert to Titlecase\r\n        </button>\r\n        <button\r\n          disabled={Text.length === 0}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={handleCopy}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          disabled={Text.length === 0}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove extra spaces\r\n        </button>\r\n        <button\r\n          disabled={Text.length === 0}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={handleClear}\r\n        >\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div className=\"container text_summary my-2\">\r\n        <h3>Text summary</h3>\r\n        <p>\r\n          {Text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length}words {Text.length}charecters\r\n        </p>\r\n        <p>{0.008 * Text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length}Minutes to read</p>\r\n        <hr />\r\n        <h3>Preview</h3>\r\n        <p>\r\n          {Text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length > 0\r\n            ? Text\r\n            : \"Nothing to preview here :)\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (str) => {\r\n    const lower = str.toLowerCase()\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n  }\r\n  return (\r\n\r\n    <>\r\n      <div className=\"mb-1\" style={{ height: '50px', }}>\r\n        {props.alert &&\r\n          <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n          </div>}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport React from 'react'\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport Alert from \"./Components/Alert\";\n\nfunction App() {\n  const [blackMode, setBlackMode] = useState(true);\n\n\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  const setStyle = {\n    modeBlack: () => {\n      if (blackMode === true) {\n        setBlackMode(false)\n        setBtnText(\"Disble Dark Mode\");\n        document.body.style.backgroundColor = \"black\";\n        document.body.style.color = \"white\";\n      }\n      else {\n        setBtnText(\"Enable Dark Mode\");\n        document.body.style.backgroundColor = \"white\";\n        document.body.style.color = \"black\";\n      }\n    }\n  }\n  return (\n    <>\n        <Navbar\n          blackMode={blackMode}\n          btnText={btnText}\n          setBlackMode={setBlackMode}\n          setStyle={setStyle}\n        />\n        <Alert alert={alert} />\n          <div className=\"container\">\n            <TextForm\n              heading=\"Try TextUtils- Word counter, Charecter counter and Remove extra spaces\"\n              showAlert={showAlert}\n              setStlye={setStyle}\n              blackMode={blackMode}\n              btnText={btnText}\n            />\n          </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}